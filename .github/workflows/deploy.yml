name: Deploy Lambda Functions with Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      APPLY_OR_DESTROY:
        description: 'Choose whether to apply or destroy Terraform resources'
        required: true
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless of the runner OS
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Set up AWS CLI with credentials
    - name: Set up AWS CLI
      run: |
        if [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" || -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" || -z "${{ secrets.AWS_REGION }}" ]]; then
          echo "AWS credentials or region are missing!"
          exit 1
        fi
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.5.0'  # Use the desired version
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize Terraform (initialize working directory)
    - name: Terraform Init
      run: terraform init

    # Format Terraform files to ensure they adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generate Terraform execution plan (this checks what changes will be made)
    - name: Terraform Plan
      run: terraform plan -input=false -out=tfplan

    # Build and upload Lambda packages only when APPLY is selected
    - name: Build and Upload Lambda Packages
      if: ${{ github.event.inputs.APPLY_OR_DESTROY == 'apply' }}
      run: |
        lambdas="${{ secrets.LAMBDA_FUNCTIONS }}"
        for lambdaName in $(echo $lambdas | tr ',' '\n'); do
          git diff --quiet HEAD~1 lambda-functions/$lambdaName || {
            echo "Changes detected for $lambdaName, building and uploading..."
            bash lambda-functions/$lambdaName/build.sh
            aws s3 cp lambda-functions/$lambdaName/package.zip s3://$S3_BUCKET/lambda-packages/$lambdaName/package.zip
          }
        done

    # Check if tfplan file exists
    - name: Check tfplan file existence
      run: |
        if [ ! -f terraform/tfplan ]; then
          echo "Terraform plan file tfplan not found!"
          exit 1
        else
          echo "Terraform plan file tfplan found!"
        fi

    # Apply Terraform changes (create/update resources based on the plan)
    - name: Terraform Apply
      if: ${{ github.event.inputs.APPLY_OR_DESTROY == 'apply' }}
      run: |
        terraform apply -auto-approve terraform/tfplan || { echo 'Terraform apply failed'; exit 1; }

    # Destroy Terraform-managed resources (if destroy is selected)
    - name: Terraform Destroy
      if: ${{ github.event.inputs.APPLY_OR_DESTROY == 'destroy' }}
      run: |
        terraform destroy -auto-approve || { echo 'Terraform destroy failed'; exit 1; }
