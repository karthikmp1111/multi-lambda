name: Deploy Multi-Lambda with Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: bg-kar-terraform-state
      LAMBDA_FUNCTIONS: lambda1,lambda2,lambda3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Detect and build changed Lambda packages
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          IFS=',' read -ra LAMBDAS <<< "$LAMBDA_FUNCTIONS"
          for lambda in "${LAMBDAS[@]}"; do
            if git diff --quiet HEAD~1 -- "lambda-functions/${lambda}"; then
              echo "No changes detected for ${lambda}"
            else
              echo "Changes detected for ${lambda}, building..."
              bash lambda-functions/${lambda}/build.sh
              aws s3 cp lambda-functions/${lambda}/package.zip s3://$S3_BUCKET/lambda-packages/${lambda}/package.zip
            fi
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: terraform
        run: terraform destroy -auto-approve
